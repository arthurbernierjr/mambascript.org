{"content":"<p><center></p>\n<h4 id=\"clickheretogotostartherestarthere\"><a href=\"/start-here\">Click Here To Go To Start-Here</a></h4>\n<h4 id=\"clickheretogotogettingreadytolearnmambascriptlearningmambascript\"><a href=\"/learning-mambascript\">Click Here To Go To Getting Ready to Learn MambaScript</a></h4>\n<h4 id=\"clickheretogotodocsdocs\"><a href=\"/docs\">Click Here To Go To Docs</a></h4>\n<h1 id=\"whatwearedoing\">What we are doing</h1>\n<pre><code class=\"bash language-bash\">The computer programmer is a creator of universes for which he alone is responsible.\nUniverses of virtually unlimited complexity can be created in the form of computer programs.\n- Joseph Weizenbaum, Computer Power and Human Reason\n</code></pre>\n<h1 id=\"computers\">Computers</h1>\n<p>Back in the day when personal computers were first hitting the scene you couldn't use one without\nsome knowledge of how to code.\nNowadays computers are everywhere and most users do not get much further than clicking things with a mouse.\nFor non-developers this is awesome, could you imagine how bad Apple sales would be if you had to take a college\nprogramming class just to log on to your facebook, even more facebook, ig and the rest wouldn't exist altogether.\nFor those of us that want to get into that computer and give it commands in code, this means we have to jump through certain hoops.\nEnter the terminal, text editors like Atom and other tools like it.</p>\n<p>Computers communicate in zeros and ones in what's known as binary. Programs that computers read look something like this :</p>\n<pre><code class=\"bash language-bash\">00110001 00000000 00000000 00110011 00000001 00000010\n00100010 00000010 00001000 01000001 00000001 00000001\n01100010 00000000 00000000 00110001 00000001 00000001\n01010001 00001011 00000010 01000011 00000001 00000000\n00010000 00000010 00000000\n</code></pre>\n<p>This is the code that would add the numbers from 1 to 10 together and print it.\nThis obviously is ridiculous to write and shout out to the old school developers\nthat had to do this. Writing programs back in the day took alot of tedious\ntrial and error, and writing some of the complex applications that we use today\nwere completely inconceivable, could you imagine using those zeros and ones to\ncreate google maps?</p>\n<p>The code above could be written out in English line by line like this</p>\n<pre><code class=\"bash language-bash\">1) Store the number 0 in memory location 0\n2) Store the number 1 in memory location 1\n3) Store the value of memory location 1 in location 2\n4) Subtract the number 11 from the value in location 2\n5) If the value in memory location 2 is the number 0, continue with instruction 9\n6) Add the value of memory location 1 to location 0\n7) Add the number 1 to the value of memory location 1\n8) Continue with instruction 3\n9) Output the value of memory location 0\n</code></pre>\n<p>Now the english above is way more readable but somewhat unpleasant to write out\neach task must be written one by one we can improve upon this with the text below.</p>\n<pre><code class=\"bash language-bash\">Set 'total' to 0\nSet 'count' to 1\n[loop]\nSet 'compare' to 'count'\nSubtract 11 from 'compare'\nIf 'compare' is zero, continue at [end]\nAdd 'count' to 'total'\nAdd 1 to 'count'\nContinue at [loop]\n[end]\nOutput 'total'\n</code></pre>\n<p>This program is very easy to read. The first two lines give two memory locations\ntotal and count. We also initialize the values to <code>0</code> and <code>1</code> respectfully.\nThe lines using <code>compare</code> are probably the weirdest ones What the program wants\nto do is see if count is equal to 11, in order to decide whether it can stop yet.\nBecause the ma- chine is so primitive, it can only test whether a number is zero,\nand make a decision (jump) based on that. So it uses the memory location labelled\ncompare to compute the value of count - 11, and makes a decision based on that\nvalue. The next two lines add the value of count to the result, and increment count\nby one every-time the program has decided that is not 11 yet. Here is the same\nprogram in MambaScript :</p>\n<pre><code class=\"coffee language-coffee\">total = 0\ncount = 1\n\nwhile count &lt;= 10\n  total += count\n  count += 1\npresent total\n</code></pre>\n<p>This program is a definite improvement we are able to write way less lines of\ncode. The keyword <code>while</code> makes things incredibly simple. In our previous code\nwe had to jump back and forth, but now we no longer have to do that. This can also\nbe expressed in an even more succinct way in MambaScript.</p>\n<pre><code class=\"coffee language-coffee\">total = 0\ntotal += count forEvery count in [1..10]\npresent total\n</code></pre>\n<p>The following code in MambaScript does in three lines what the other code above\ndid in many more.</p>\n<pre><code class=\"coffee language-coffee\">total = 0\ntotal += count forEvery count in [1..10]  \npresent total  \n</code></pre>\n<p>Create a position in memory called total and set value to 0, and then <code>forEvery</code>\nand <code>in</code> keywords goes through the range of numbers from 1 to 10, assigning each number to count in turn. Each value in count is then added to total.</p>\n<p>We can also use something that we'll see shortly called a function that would allow\nus to write everything in one line</p>\n<pre><code class=\"coffee language-coffee\">present sum([1..10])\n</code></pre>\n<h3 id=\"or\">or</h3>\n<pre><code class=\"coffee language-coffee\">present [1..10].sum()\n</code></pre>\n<h1 id=\"basicmambascript\">Basic MambaScript</h1>\n<h2 id=\"valuesandvariables\">Values and Variables</h2>\n<p>Values can have different datatypes and their are 6 basic types in MambaScript</p>\n<h3 id=\"numbers\">Numbers</h3>\n<p>Numbers are written the way numbers are usually written</p>\n<pre><code class=\"coffee language-coffee\">144\n</code></pre>\n<h3 id=\"strings\">Strings</h3>\n<p>Strings are used for storing and manipulating text. A String in MambaScript is\nzero or more characters written inside of quotes.</p>\n<pre><code class=\"coffee language-coffee\">goat = 'Kobe Bryant'\n</code></pre>\n<p>You can use either single or double quotes:</p>\n<pre><code class=\"coffee language-coffee\">carName1 = 'Mercedes Benz S550'\ncarName2 = \"Tesla Model S\"\n</code></pre>\n<p>You can also create multiline strings with either triple single quotes, or triple\ndouble quotes.</p>\n<pre><code class=\"coffee language-coffee\">theRaven = '''\n    Once upon a midnight dreary while I pondered, weak and weary,\n    Over many quaint and curious volume of forgotten lore -\n    While I nodded, nearly napping, suddenly there came a tapping,\n    As of some one gently rapping, rapping at my chamber door\n    \"'Tis some visiter\". I muttered, \"tapping at my chamber door\" -\n    \"only this and nothing more.\"\n\n    Ah distinctly I remember it was in the bleak December;\n    And each separate dying ember wrought its ghost upon the floor.\n    Eagerly I wished the morrow - vainly I had sought to borrow,\n    From my books surcease of sorrow - sorrow For the lost Lenore -\n    For the rare and radiant maiden whom the angels name Lenore -\n    Nameless here For evermore\n'''\n\nhamlet = \"\"\"\n    To be or not to be, that is the question\n    Whether tis Nobler in the mind to suffer\n    The Slings and Arrows of outrageous Fortune,\n    Or to take Arms against a Sea of troubles,\n    And By opposing end them, to die, to sleep\n    No more. and By a sleep, to say we end\n    The heart-ache and the thousand Natural shocks\n    That Flesh is heir to?\n\"\"\"\n</code></pre>\n<h3 id=\"booleans\">Booleans</h3>\n<p>A MambaScript Boolean represents one of two types of values: <code>truthy and falsey</code></p>\n<p>Truthy values are values that the MambaScript compiler considers <code>true</code> and are of\nthe type Boolean. <code>yes, on and true</code></p>\n<p>Falsey values are values that the MambaScript compiler considers <code>false</code> and are of\nthe type Boolean. <code>no, off and false</code></p>\n<pre><code class=\"coffee language-coffee\">present '------- is  and Booleans --------'\npresent 'Truthy Booleans true, on, yes'\npresent 'Falsey Booleans false, off, no'\npresent true is on\npresent true is yes\npresent false is off\npresent false is no\n</code></pre>\n<h3 id=\"objects\">Objects</h3>\n<p>Objects in MambaScript are a way to store data that in an individual container</p>\n<pre><code class=\"coffee language-coffee\">obj =  {\n  \"MambaScript\":    \"JavaScript\"\n  \"is\": \"===\"\n  \"isnt\":    \"!==\"\n  \"not\":    \"!\"\n  \"also\":    \"&amp;&amp;\"\n  \"or\":    \"||\"\n  \"true yes on\":    \"true\"\n  \"false no off\":    \"false\"\n  \"@ this\":     \"this\"\n  \"of\": \"in\"\n  \"in\": \"no JS Equivalent\"\n}\n</code></pre>\n<h3 id=\"functions\">Functions</h3>\n<p>Functions are one of the fundamental building blocks in MambaScript. A function in MambaScript is similar to a procedureâ€”a set of statements that performs a task or calculates a value, but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output. To use a function, you must define it somewhere in the scope from which you wish to call it.</p>\n<pre><code class=\"coffee language-coffee\"># eat is a function that accepts a string and returns nothing\neat :: String -&gt; () = (food :: String ) -&gt;\n  present \"yum #{food.toUpperCase()} !!!\"\n\neat food forEvery food in ['toast', 'cheese', 'wine']\n\neat food forEvery food in  ['toast', 'cheese', 'wine'] when food isnt 'cheese'\n</code></pre>\n<h3 id=\"undefinedandnullvalues\">Undefined and Null Values</h3>\n<pre><code class=\"coffee language-coffee\">a :: Int?\na = 1\na = null\n\nb :: Int = 1\n# b = a # can't assign nullable to non-nullable\na = b\n\nlistWithNull :: Int?[] = [1, 2, 3, null, 5]\nlistMaybeNull :: Int?[]? = null\nlistMaybeNull = listWithNull\n\nintByConditional :: Int =\n  if Math.random() &gt; 0.5\n    1\n  else\n    2\n\n# can't be Int\nnullableIntByConditional :: Int? =\n  if Math.random() &gt; 0.5\n    1\n\nintBySwitch :: Int =\n  switch ~~(Math.random()* 10)\n    when 1\n      1\n    when 2\n      2\n    else\n      3\n\n# can't be Int\nnullableIntBySwitch :: Int? =\n  switch ~~(Math.random()* 10)\n    when 1\n      1\n    when 2\n      2\n</code></pre>\n<h2 id=\"controlflow\">Control Flow</h2>\n<p>Coming Soon</p>\n<h2 id=\"whatisapessimistictypeinterface\">What is a pessimistic type interface?</h2>\n<p>To pass the dynamic type system, MambaScript expects symbol to be <code>implicit</code> node by default. If compiler compares implicit node type and implicit node type fails, it recovers to <code>implicit</code> <code>Any</code> automatically.</p>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"assigmentwithtype\">Assigment with type</h3>\n<pre><code class=\"coffee language-coffee\">n :: Int = 3\n</code></pre>\n<h3 id=\"predefinedsymbol\">Pre defined symbol</h3>\n<pre><code class=\"coffee language-coffee\">x :: Number\nx = 3.14\n</code></pre>\n<h3 id=\"nullable\">Nullable</h3>\n<pre><code class=\"coffee language-coffee\">x :: Number?\nx = 3.14\nx = null\n</code></pre>\n<h3 id=\"typedarray\">Typed Array</h3>\n<pre><code class=\"coffee language-coffee\">list :: Int[] = [1..10]\nlistWithNull :: Int?[] = [1, null, 3]\n</code></pre>\n<p>In <code>v0.10</code>, imperfect to struct.</p>\n<h3 id=\"struct\">Struct</h3>\n<pre><code class=\"coffee language-coffee\">struct Point\n  @name :: String\n  x :: Number\n  y :: Number\np :: Point = {x: 3, y: 3}\nname :: String = Point.name\n\nstruct Point3d implements Point\n  z :: Number\n</code></pre>\n<h3 id=\"module\">Module</h3>\n<p>TypedCoffeeScript has module system like TypeScript</p>\n<pre><code class=\"coffee language-coffee\">module A.B\n    class @C\n        a :: Int\nabc :: A.B.C = new A.B.C\n</code></pre>\n<h3 id=\"typedfunction\">Typed Function</h3>\n<pre><code class=\"coffee language-coffee\"># pre define\nf1 :: Int -&gt; Int\nf1 = (n) -&gt; n\n\n# annotation\nf2 :: Number -&gt; Point = (n) -&gt; x: n, y: n * 2\n\n# multi arguments\nf3 :: (Int, Int) -&gt; Int = (m, n) -&gt; m * n\n\n# another form of arguments\nf4 :: Int * Int -&gt; Int = (m, n) -&gt; m * n\n\n# partial applying\nfc :: Int -&gt; Int -&gt; Int\nfc = (m) -&gt; (n) -&gt; m * n\n</code></pre>\n<h3 id=\"blueprintinsteadofclasswiththisscope\">Blueprint instead of class with this scope</h3>\n<pre><code class=\"coffee language-coffee\">blueprint X\n  # bound to this\n  num :: Number\n  f   :: Number -&gt; Number\n\n  f: (n) -&gt;\n    @num = n\n\nx :: X = new X\nn :: Number = x.f 3\n</code></pre>\n<h3 id=\"blueprintwithimplements\">Blueprint with implements</h3>\n<pre><code class=\"coffee language-coffee\">blueprint Point\n  x :: Int\n  y :: Int\n\nstruct Size\n  width  :: Int\n  height :: Int\n\nblueprint Entity inheritsFrom Point implements Size\ne :: {x :: Int, width :: Int} = new Entity\n</code></pre>\n<h3 id=\"genericsandtypearguments\">Generics and type arguments</h3>\n<pre><code class=\"coffee language-coffee\"># struct\nstruct Value&lt;T, U&gt;\n    value :: U\nstruct Id&lt;A, B&gt;\n    id :: Value&lt;A, B&gt;\nobj :: Id&lt;Int, String&gt; =\n  id:\n    value: 'value'\n\n# function type arguments\nmap&lt;T, U&gt; :: T[] * (T -&gt; U) -&gt; U[]\nmap = (list, fn) -&gt;\n  for i in list\n    fn(i)\nlist :: String[] = map&lt;Int, String&gt; [1..10], (n) -&gt; 'i'\n\n# blueprint type arguments\nblueprint Blueprint&lt;A&gt;\n  f :: Int -&gt; Int\n  constructor :: A -&gt; ()\n  constructor: (a) -&gt;\nc = new Blueprint&lt;Int&gt;(1)\n</code></pre>\n<h1 id=\"clickheretogotostartherestarthere-1\"><a href=\"/start-here\">Click Here To Go To Start-Here</a></h1>\n<h1 id=\"clickheretogotogettingreadytolearnmambascriptlearningmambascript-1\"><a href=\"/learning-mambascript\">Click Here To Go To Getting Ready to Learn MambaScript</a></h1>\n<h1 id=\"clickheretogotodocsdocs-1\"><a href=\"/docs\">Click Here To Go To Docs</a></h1>\n<p></center>\n<small> Inspired By 'Smooth CoffeeScript', 'You Don't Know JS', and 'Eloquent JavaScript' </small></p>","data":{"title":"Docs","subTitle":"Let's Build With","excerpt":"This is the MambaScript Page","featureImage":"/img/Mamba_Script_Logo_Final-05.png","date":"10/21/21"},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/app_projects/mambascript.org/api_static/docs.md","_id":"docs"}