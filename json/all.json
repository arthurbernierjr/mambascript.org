[{"content":"<p><center></p>\n<h1 id=\"gettingreadytocodeinmambascript\">Getting Ready To Code In MambaScript</h1>\n<h1 id=\"step1\">Step 1</h1>\n<p>In order to use MambaScript you must have NodeJS installed on your machine, you can download NODEJS for Mac, Linux or Windows <a href=\"https://nodejs.org/en/\"><strong>here</strong></a>, make sure to choose the LTS version to download</p>\n<p><a href=\"https://nodejs.org/en/\"><img src=\"https://www.dropbox.com/s/ll8llnvjfce4zoh/Screen%20Shot%202021-10-31%20at%208.51.53%20PM.png?dl=1\" alt=\"nodejs\" /></a></p>\n<h1 id=\"step2\">Step 2</h1>\n<p>After installing NodeJS you should now be able to open your Terminal Application and check to make sure you have properly installed it, open your terminal and type the following command (keep in mind you should not copy the $ , and if you may see a different symbol in your terminal at the beginning of every line  like maybe a %, as you will see if you follow me my terminal is customized and my symbol is a goat)</p>\n<pre><code class=\"bash language-bash\">$ which node\n</code></pre>\n<p><img src=\"https://www.dropbox.com/s/7o3gjyfjc6ep7ch/Screen%20Shot%202021-10-31%20at%208.59.31%20PM.png?dl=1\" alt=\"which node\" /></p>\n<p>as you can see the terminal responded to my <code>which node</code> command with the location of nodejs on my computer which\nhappens to be <code>/usr/local/bin/node</code>, the location of node on your machine doesn't need to match mine, but what's\nimportant is your computer knows how where to access nodejs from.</p>\n<h1 id=\"step3\">Step 3</h1>\n<p>Now we need to verify that you are using an up to date version of Node. we can do that by typing the following command</p>\n<pre><code class=\"bash language-bash\">$ node --version\n</code></pre>\n<p><img src=\"https://www.dropbox.com/s/oxcnvz19m9mjc1e/Screen%20Shot%202021-10-31%20at%209.03.51%20PM.png?dl=1\" alt=\"node version\" /></p>\n<p>As long as your node version is higher than 14.8 or higher you are good to go on Node</p>\n<h1 id=\"step4\">Step 4</h1>\n<p>Now we need to install MambaScript globally on our machine with nodejs, this will allow us to be able to\nexecute <code>.mamba</code> files on our machine</p>\n<pre><code class=\"bash language-bash\">$ sudo npm i -g mambascript\n</code></pre>\n<h2 id=\"orifyougetapermissionerrortrythebelowcommandtorunthecommandastherootuser\">or if you get a permission error try the below command to run the command as the root user</h2>\n<pre><code class=\"bash language-bash\">$ sudo npm i -g mambascript\n</code></pre>\n<p>Sudo stands for <code>super</code> <code>user</code> <code>do</code>. This keyword allows you to perform administrative tasks on your device. You will be prompted to enter your password when you do this. It's important to note 99% of the time this is your computer password\nand also you won't see the password appear on your screen at all. This is for safety, just type the password and press enter/return.</p>\n<h1 id=\"step5\">Step 5</h1>\n<p>Next you need to download the Atom Text Editor because it is the only editor that currently supports MambaScript,\nsoon we will support Sublime, Neovim and VS Code as well, and any other editor's will be up to the community to support.</p>\n<p>You can download atom by clicking <a href=\"https://atom.io\"><strong>here</strong></a></p>\n<p><a href=\"https://atom.io\"><img src=\"https://www.dropbox.com/s/jzwngsqjogj0q1o/Screen%20Shot%202021-10-31%20at%209.15.27%20PM.png?dl=1\" alt=\"atom\" /></a></p>\n<p>Note: If you are using a mac, make sure to drag and drop Atom into your Applications folder after you install it, if not you  will get weird bugs</p>\n<h1 id=\"step6\">Step 6</h1>\n<p>Once you have opened Atom, you need to install the MambaScript Language package so you can now read MambaScript files.</p>\n<p><img src=\"https://www.dropbox.com/s/ryw42jfzau5a1uf/Screen%20Shot%202021-10-31%20at%209.19.26%20PM.png?dl=1\" alt=\"language\" /></p>\n<p>The one with the handsome black man next to it lol, is the one you want to install.</p>\n<h1 id=\"step7\">Step 7</h1>\n<p>Pat yourself on the back your ready to start using mambascript on the machine you just set up.</p>\n<h1 id=\"clickheretogotodocsdocs\"><a href=\"/docs\">Click Here To Go To Docs</a></h1>\n<p></center></p>","data":{"title":"Getting Ready to Learn MambaScript","subTitle":"Examples of MambaScript Code","excerpt":"I want to be the best. I want to be the best simple and plain, thats what drives me - Kobe Bryant","featureImage":"/img/mamba.gif","date":"10/28/21"},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/app_projects/mambascript.org/api/learning-mambascript.md","_id":"learning-mambascript"},{"content":"<h2 id=\"gettingstarted\">Getting Started</h2>\n<p>Install and run!</p>\n<pre><code class=\"bash language-bash\">$ npm install -g mambascript\n$ mamba -c foo.mamba # compile\n$ mamba foo.mamba # execute\n$ mamba # repl\n$ start-mambascript #start a new mambascript project\n</code></pre>\n<h3 id=\"extensionsyoushouldknowaboutmambascript\">Extensions you should know about MambaScript</h3>\n<ul>\n<li><code>.mamba</code> are compiled by mambascript compiler.</li>\n</ul>\n<hr/>\n<pre><code class=\"coffee language-coffee\">    # Concatenate string\n    present '-------Concatenate string--------'\n    present 'Concatenate --&gt;',  'con' + 'cat' + 'en' + 'ate'\n\n    # typeof operator\n    present '-------TYPEOF operator--------'\n    present 'Typeof Operator --&gt;', typeof 'arthur'\n\n    # isnt\n    present '-------ISNT instead of !== --------'\n    present 'ISNT --&gt;' , 'Love' isnt 'Hate'\n\n    # and , &amp;&amp; , also\n    present '------- also --------'\n    present 'ALSO --&gt;', 5 &gt; 3 also 6 &gt; 5\n\n    # or, ||\n    present '------- or --------'\n    present 'OR --&gt;', true or false\n\n    # not\n    present '-------NOT--------'\n    present not true\n\n    # is  and Booleans\n    present '------- is  and Booleans --------'\n    present 'Truthy Booleans true, on, yes'\n    present 'Falsey Booleans false, off, no'\n    present true is on\n    present true is yes\n    present false is off\n    present false is no\n\n\n    # Types\n\n    obj =  {\n        \"MambaScript\":  \"JavaScript\"\n        \"is\": \"===\"\n        \"isnt\": \"!==\"\n        \"not\":  \"!\"\n        \"also\": \"&amp;&amp;\"\n        \"or\":   \"||\"\n        \"true yes on\":  \"true\"\n        \"false no off\": \"false\"\n        \"@ this\":   \"this\"\n        \"of\": \"in\"\n        \"in\": \"no JS Equivalent\"\n    }\n\n    keys :: String[] = Object.keys obj\n\n    forEvery key in keys then present \"[#{key}] in MambaScript is equivalent to [#{obj[key]}] in JavaScript\" unless key is 'MambaScript'\n\n    # Strings\n\n    myString :: String = 'arthur'\n\n    present myString.split('').reverse().join('')\n    present typeof myString\n\n    # Numbers\n\n    myNumber :: Number = 5\n\n    present 'myNumber is', myNumber\n    present myNumber * 2\n    present myNumber ** 2\n    present myNumber % 3\n    present myNumber / 2\n\n\n    # Booleans\n    myBoolean :: Boolean = yes\n    present 'myBoolean is', myBoolean\n\n    # Objects\n    myObj =\n        name: 'arthur'\n        age: 32\n        lights: on\n        hair: true\n\n    present myObj\n    # Arrays\n    numArr :: Int[] = [1,2,3]\n    stringArr :: String[] = ['a', 'b', 'c']\n    otherArr :: Any[] = [1, 'a']\n    present otherArr\n\n    # Loops &amp; Control Flow\n\n    forEvery number in [0..12] by 2 then present number\n\n    forEvery number in [0..10]\n        do (number) -&gt;\n            present number * 3\n\n    # eat is a function that accepts a string and returns nothing\n    eat :: String -&gt; () = (food :: String ) -&gt;\n        present \"yum #{food.toUpperCase()} !!!\"\n\n    eat food forEvery food in ['toast', 'cheese', 'wine']\n\n    eat food forEvery food in  ['toast', 'cheese', 'wine'] when food isnt 'cheese'\n    # Blueprints\n\n    blueprint Human\n        name :: String\n        age :: Int\n        constructor: (age :: Int, name :: String) -&gt;\n            @name = name\n            @age = age\n\n    blueprint SuperHero inheritsFrom Human\n        name :: String\n        age :: Int\n        powers :: String[]\n\n        constructor: (name :: String, age :: Int, powers...) -&gt;\n            super name, age\n            @powers = powers\n\n    bigArt = new SuperHero 'Big Art', 33, 'flight', 'super strength'\n\n    present bigArt\n\n    # Functions\n\n    # Structs\n\n    # Generics\n</code></pre>\n<h2 id=\"whatisapessimistictypeinterface\">What is a pessimistic type interface?</h2>\n<p>To pass the dynamic type system, MambaScript expects symbol to be <code>implicit</code> node by default. If compiler compares implicit node type and implicit node type fails, it recovers to <code>implicit</code> <code>Any</code> automatically.</p>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"assigmentwithtype\">Assigment with type</h3>\n<pre><code class=\"coffee language-coffee\">n :: Int = 3\n</code></pre>\n<h3 id=\"predefinedsymbol\">Pre defined symbol</h3>\n<pre><code class=\"coffee language-coffee\">x :: Number\nx = 3.14\n</code></pre>\n<h3 id=\"nullable\">Nullable</h3>\n<pre><code class=\"coffee language-coffee\">x :: Number?\nx = 3.14\nx = null\n</code></pre>\n<h3 id=\"typedarray\">Typed Array</h3>\n<pre><code class=\"coffee language-coffee\">list :: Int[] = [1..10]\nlistWithNull :: Int?[] = [1, null, 3]\n</code></pre>\n<p>In <code>v0.10</code>, imperfect to struct.</p>\n<h3 id=\"struct\">Struct</h3>\n<pre><code class=\"coffee language-coffee\">struct Point\n  @name :: String\n  x :: Number\n  y :: Number\np :: Point = {x: 3, y: 3}\nname :: String = Point.name\n\nstruct Point3d implements Point\n  z :: Number\n</code></pre>\n<h3 id=\"module\">Module</h3>\n<p>TypedCoffeeScript has module system like TypeScript</p>\n<pre><code class=\"coffee language-coffee\">module A.B\n    class @C\n        a :: Int\nabc :: A.B.C = new A.B.C\n</code></pre>\n<h3 id=\"typedfunction\">Typed Function</h3>\n<pre><code class=\"coffee language-coffee\"># pre define\nf1 :: Int -&gt; Int\nf1 = (n) -&gt; n\n\n# annotation\nf2 :: Number -&gt; Point = (n) -&gt; x: n, y: n * 2\n\n# multi arguments\nf3 :: (Int, Int) -&gt; Int = (m, n) -&gt; m * n\n\n# another form of arguments\nf4 :: Int * Int -&gt; Int = (m, n) -&gt; m * n\n\n# partial applying\nfc :: Int -&gt; Int -&gt; Int\nfc = (m) -&gt; (n) -&gt; m * n\n</code></pre>\n<h3 id=\"blueprintinsteadofclasswiththisscope\">Blueprint instead of class with this scope</h3>\n<pre><code class=\"coffee language-coffee\">blueprint X\n  # bound to this\n  num :: Number\n  f   :: Number -&gt; Number\n\n  f: (n) -&gt;\n    @num = n\n\nx :: X = new X\nn :: Number = x.f 3\n</code></pre>\n<h3 id=\"blueprintwithimplements\">Blueprint with implements</h3>\n<pre><code class=\"coffee language-coffee\">blueprint Point\n  x :: Int\n  y :: Int\n\nstruct Size\n  width  :: Int\n  height :: Int\n\nblueprint Entity inheritsFrom Point implements Size\ne :: {x :: Int, width :: Int} = new Entity\n</code></pre>\n<h3 id=\"genericsandtypearguments\">Generics and type arguments</h3>\n<pre><code class=\"coffee language-coffee\"># struct\nstruct Value&lt;T, U&gt;\n    value :: U\nstruct Id&lt;A, B&gt;\n    id :: Value&lt;A, B&gt;\nobj :: Id&lt;Int, String&gt; =\n  id:\n    value: 'value'\n\n# function type arguments\nmap&lt;T, U&gt; :: T[] * (T -&gt; U) -&gt; U[]\nmap = (list, fn) -&gt;\n  for i in list\n    fn(i)\nlist :: String[] = map&lt;Int, String&gt; [1..10], (n) -&gt; 'i'\n\n# blueprint type arguments\nblueprint Blueprint&lt;A&gt;\n  f :: Int -&gt; Int\n  constructor :: A -&gt; ()\n  constructor: (a) -&gt;\nc = new Blueprint&lt;Int&gt;(1)\n</code></pre>","data":{"title":"Quick Look In MambaScript","subTitle":"A quick look at some features in MambaScript","excerpt":"I want to be the best. I want to be the best simple and plain, thats what drives me - Kobe Bryant","featureImage":"/img/mamba.gif","date":"10/28/21"},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/app_projects/mambascript.org/api/quick-look.md","_id":"quick-look"}]