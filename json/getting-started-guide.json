{"content":"<h2 id=\"gettingstarted\">Getting Started</h2>\n<p>Install and run!</p>\n<pre><code class=\"bash language-bash\">$ npm install -g mambascript\n$ mamba -c foo.mamba # compile\n$ mamba foo.mamba # execute\n$ mamba # repl\n$ start-mambascript #start a new mambascript project\n</code></pre>\n<h3 id=\"extensionsyoushouldknowaboutmambascript\">Extensions you should know about MambaScript</h3>\n<ul>\n<li><code>.mamba</code> are compiled by mambascript compiler.</li>\n</ul>\n<hr/>\n<pre><code class=\"coffee language-coffee\">    # Concatenate string\n    present '-------Concatenate string--------'\n    present 'Concatenate --&gt;',  'con' + 'cat' + 'en' + 'ate'\n\n    # typeof operator\n    present '-------TYPEOF operator--------'\n    present 'Typeof Operator --&gt;', typeof 'arthur'\n\n    # isnt\n    present '-------ISNT instead of !== --------'\n    present 'ISNT --&gt;' , 'Love' isnt 'Hate'\n\n    # and , &amp;&amp; , also\n    present '------- also --------'\n    present 'ALSO --&gt;', 5 &gt; 3 also 6 &gt; 5\n\n    # or, ||\n    present '------- or --------'\n    present 'OR --&gt;', true or false\n\n    # not\n    present '-------NOT--------'\n    present not true\n\n    # is  and Booleans\n    present '------- is  and Booleans --------'\n    present 'Truthy Booleans true, on, yes'\n    present 'Falsey Booleans false, off, no'\n    present true is on\n    present true is yes\n    present false is off\n    present false is no\n\n\n    # Types\n\n    obj =  {\n        \"MambaScript\":  \"JavaScript\"\n        \"is\": \"===\"\n        \"isnt\": \"!==\"\n        \"not\":  \"!\"\n        \"also\": \"&amp;&amp;\"\n        \"or\":   \"||\"\n        \"true yes on\":  \"true\"\n        \"false no off\": \"false\"\n        \"@ this\":   \"this\"\n        \"of\": \"in\"\n        \"in\": \"no JS Equivalent\"\n    }\n\n    keys :: String[] = Object.keys obj\n\n    forEvery key in keys then present \"[#{key}] in MambaScript is equivalent to [#{obj[key]}] in JavaScript\" unless key is 'MambaScript'\n\n    # Strings\n\n    myString :: String = 'arthur'\n\n    present myString.split('').reverse().join('')\n    present typeof myString\n\n    # Numbers\n\n    myNumber :: Number = 5\n\n    present 'myNumber is', myNumber\n    present myNumber * 2\n    present myNumber ** 2\n    present myNumber % 3\n    present myNumber / 2\n\n\n    # Booleans\n    myBoolean :: Boolean = yes\n    present 'myBoolean is', myBoolean\n\n    # Objects\n    myObj =\n        name: 'arthur'\n        age: 32\n        lights: on\n        hair: true\n\n    present myObj\n    # Arrays\n    numArr :: Int[] = [1,2,3]\n    stringArr :: String[] = ['a', 'b', 'c']\n    otherArr :: Any[] = [1, 'a']\n    present otherArr\n\n    # Loops &amp; Control Flow\n\n    forEvery number in [0..12] by 2 then present number\n\n    forEvery number in [0..10]\n        do (number) -&gt;\n            present number * 3\n\n    # eat is a function that accepts a string and returns nothing\n    eat :: String -&gt; () = (food :: String ) -&gt;\n        present \"yum #{food.toUpperCase()} !!!\"\n\n    eat food forEvery food in ['toast', 'cheese', 'wine']\n\n    eat food forEvery food in  ['toast', 'cheese', 'wine'] when food isnt 'cheese'\n    # Blueprints\n\n    blueprint Human\n        name :: String\n        age :: Int\n        constructor: (age :: Int, name :: String) -&gt;\n            @name = name\n            @age = age\n\n    blueprint SuperHero inheritsFrom Human\n        name :: String\n        age :: Int\n        powers :: String[]\n\n        constructor: (name :: String, age :: Int, powers...) -&gt;\n            super name, age\n            @powers = powers\n\n    bigArt = new SuperHero 'Big Art', 33, 'flight', 'super strength'\n\n    present bigArt\n\n    # Functions\n\n    # Structs\n\n    # Generics\n</code></pre>\n<h2 id=\"whatisapessimistictypeinterface\">What is a pessimistic type interface?</h2>\n<p>To pass the dynamic type system, MambaScript expects symbol to be <code>implicit</code> node by default. If compiler compares implicit node type and implicit node type fails, it recovers to <code>implicit</code> <code>Any</code> automatically.</p>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"assigmentwithtype\">Assigment with type</h3>\n<pre><code class=\"coffee language-coffee\">n :: Int = 3\n</code></pre>\n<h3 id=\"predefinedsymbol\">Pre defined symbol</h3>\n<pre><code class=\"coffee language-coffee\">x :: Number\nx = 3.14\n</code></pre>\n<h3 id=\"nullable\">Nullable</h3>\n<pre><code class=\"coffee language-coffee\">x :: Number?\nx = 3.14\nx = null\n</code></pre>\n<h3 id=\"typedarray\">Typed Array</h3>\n<pre><code class=\"coffee language-coffee\">list :: Int[] = [1..10]\nlistWithNull :: Int?[] = [1, null, 3]\n</code></pre>\n<p>In <code>v0.10</code>, imperfect to struct.</p>\n<h3 id=\"struct\">Struct</h3>\n<pre><code class=\"coffee language-coffee\">struct Point\n  @name :: String\n  x :: Number\n  y :: Number\np :: Point = {x: 3, y: 3}\nname :: String = Point.name\n\nstruct Point3d implements Point\n  z :: Number\n</code></pre>\n<h3 id=\"module\">Module</h3>\n<p>TypedCoffeeScript has module system like TypeScript</p>\n<pre><code class=\"coffee language-coffee\">module A.B\n    class @C\n        a :: Int\nabc :: A.B.C = new A.B.C\n</code></pre>\n<h3 id=\"typedfunction\">Typed Function</h3>\n<pre><code class=\"coffee language-coffee\"># pre define\nf1 :: Int -&gt; Int\nf1 = (n) -&gt; n\n\n# annotation\nf2 :: Number -&gt; Point = (n) -&gt; x: n, y: n * 2\n\n# multi arguments\nf3 :: (Int, Int) -&gt; Int = (m, n) -&gt; m * n\n\n# another form of arguments\nf4 :: Int * Int -&gt; Int = (m, n) -&gt; m * n\n\n# partial applying\nfc :: Int -&gt; Int -&gt; Int\nfc = (m) -&gt; (n) -&gt; m * n\n</code></pre>\n<h3 id=\"blueprintinsteadofclasswiththisscope\">Blueprint instead of class with this scope</h3>\n<pre><code class=\"coffee language-coffee\">blueprint X\n  # bound to this\n  num :: Number\n  f   :: Number -&gt; Number\n\n  f: (n) -&gt;\n    @num = n\n\nx :: X = new X\nn :: Number = x.f 3\n</code></pre>\n<h3 id=\"blueprintwithimplements\">Blueprint with implements</h3>\n<pre><code class=\"coffee language-coffee\">blueprint Point\n  x :: Int\n  y :: Int\n\nstruct Size\n  width  :: Int\n  height :: Int\n\nblueprint Entity inheritsFrom Point implements Size\ne :: {x :: Int, width :: Int} = new Entity\n</code></pre>\n<h3 id=\"genericsandtypearguments\">Generics and type arguments</h3>\n<pre><code class=\"coffee language-coffee\"># struct\nstruct Value&lt;T, U&gt;\n    value :: U\nstruct Id&lt;A, B&gt;\n    id :: Value&lt;A, B&gt;\nobj :: Id&lt;Int, String&gt; =\n  id:\n    value: 'value'\n\n# function type arguments\nmap&lt;T, U&gt; :: T[] * (T -&gt; U) -&gt; U[]\nmap = (list, fn) -&gt;\n  for i in list\n    fn(i)\nlist :: String[] = map&lt;Int, String&gt; [1..10], (n) -&gt; 'i'\n\n# blueprint type arguments\nblueprint Blueprint&lt;A&gt;\n  f :: Int -&gt; Int\n  constructor :: A -&gt; ()\n  constructor: (a) -&gt;\nc = new Blueprint&lt;Int&gt;(1)\n</code></pre>","data":{"title":"Quick Look In MambaScript","subTitle":"A quick look at some features in MambaScript","excerpt":"I want to be the best. I want to be the best simple and plain, thats what drives me - Kobe Bryant","featureImage":"/img/mamba.gif","date":"10/28/21"},"isEmpty":false,"excerpt":"","path":"/Users/bigpoppacode/code/app_projects/mambascript.org/api/getting-started-guide.md","_id":"getting-started-guide"}